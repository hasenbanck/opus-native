//! Implements the modified discrete cosine transform.

use crate::celt::FFT_CONFIGURATION;
use crate::math::Complex;

/// This is a simple MDCT implementation that uses a N/4 complex FFT
/// to do most of the work. It should be relatively straightforward to
/// plug in pretty much any FFT here.
///
/// This replaces the Vorbis FFT (and uses the exact same API), which
/// was a bit too messy and that was ending up duplicating code
/// (might as well use the same FFT everywhere).
///
/// The algorithm is similar to (and inspired from) Fabrice Bellard's
/// MDCT implementation in FFMPEG, but has differences in signs, ordering
/// and scaling in many places.
pub(crate) struct Mdct {
    /// Float scratch pad.
    spf: Vec<f32>,
    /// Complex scratch pad.
    spc: Vec<Complex>,
}

const N: usize = 1920;

impl Default for Mdct {
    fn default() -> Self {
        Self {
            spf: vec![],
            spc: vec![],
        }
    }
}

impl Mdct {
    /// Compute a forward MDCT and scale by 4/N, trashes the input array.
    pub(crate) fn forward(
        &mut self,
        input: &[f32],
        output: &mut [f32],
        window: &[f32],
        overlap: usize,
        shift: usize,
        stride: usize,
    ) {
        let mut n = N;
        let mut trigp = 0;
        (0..shift).into_iter().for_each(|_| {
            n >>= 1;
            trigp += n;
        });
        let n2 = n >> 1;
        let n4 = n >> 2;

        if self.spf.len() < n2 {
            self.spf.resize(n2, 0.0);
        }
        if self.spc.len() < n4 {
            self.spc.resize(n4, Complex::default());
        }

        // Consider the input to be composed of four blocks: [a, b, c, d]
        // Window, shuffle, fold
        {
            let overlap_offset = (overlap + 3) >> 2;

            let mut ip0 = overlap >> 1;
            let mut ip1 = ip0 + n2 - 1;
            let mut sp = 0;

            let mut wp0 = overlap >> 1;
            let mut wp1 = wp0 - 1;

            // Real part arranged as -d-cR, Imag part arranged as -b+aR.
            (0..overlap_offset).into_iter().for_each(|_| {
                self.spf[sp] = (window[wp1] * input[ip0 + n2]) + (window[wp0] * input[ip1]);
                self.spf[sp + 1] = (window[wp0] * input[ip0]) - (window[wp1] * input[ip1 - n2]);

                sp += 2;
                ip0 += 2;
                ip1 -= 2;
                wp0 += 2;
                wp1 = wp1.wrapping_sub(2);
            });

            wp0 = 0;
            wp1 = overlap - 1;

            // Real part arranged as a-bR, Imag part arranged as -c-dR.
            (overlap_offset..n4 - overlap_offset)
                .into_iter()
                .for_each(|_| {
                    self.spf[sp] = input[ip1];
                    self.spf[sp + 1] = input[ip0];

                    sp += 2;
                    ip0 += 2;
                    ip1 -= 2;
                });

            // Real part arranged as a-bR, Imag part arranged as -c-dR.
            (n4 - overlap_offset..n4).into_iter().for_each(|_| {
                self.spf[sp] = -(window[wp0] * input[ip0 - n2]) + (window[wp1] * input[ip1]);
                self.spf[sp + 1] = (window[wp1] * input[ip0]) + (window[wp0] * input[ip1 + n2]);

                sp += 2;
                ip0 += 2;
                ip1 -= 2;
                wp0 += 2;
                wp1 = wp1.wrapping_sub(2);
            });
        }

        let fft = &FFT_CONFIGURATION[shift];

        // Pre-rotation
        {
            let mut sp = 0;
            let mut tmp = Complex::default();

            (0..n4).into_iter().for_each(|i| {
                let t0 = TRIG[trigp + i];
                let t1 = TRIG[trigp + n4 + i];
                let re = self.spf[sp];
                let im = self.spf[sp + 1];

                tmp.r = (re * t0) - (im * t1);
                tmp.i = (im * t0) + (re * t1);
                tmp *= fft.scale;
                self.spc[usize::from(fft.bitrev[i])] = tmp;

                sp += 2;
            });
        }

        fft.process(&mut self.spc);

        // Post-rotate
        {
            let mut sp = 0;
            let mut op0 = 0;
            let mut op1 = stride * (n2 - 1);

            (0..n4).into_iter().for_each(|i| {
                output[op0] =
                    (self.spc[sp].i * TRIG[trigp + n4 + i]) - (self.spc[sp].r * TRIG[trigp + i]);
                output[op1] =
                    (self.spc[sp].r * TRIG[trigp + n4 + i]) + (self.spc[sp].i * TRIG[trigp + i]);

                sp += 1;
                op0 += 2 * stride;
                op1 = op1.wrapping_sub(2 * stride);
            });
        }
    }

    /// Compute a backward MDCT (no scaling) and performs weighted overlap-add
    /// (scales implicitly by 1/2).
    pub(crate) fn backward(
        &mut self,
        input: &[f32],
        output: &mut [f32],
        window: &[f32],
        overlap: usize,
        shift: usize,
        stride: usize,
    ) {
        let mut n = N;
        let mut trigp = 0;
        (0..shift).into_iter().for_each(|_| {
            n >>= 1;
            trigp += n;
        });
        let n2 = n >> 1;
        let n4 = n >> 2;

        if self.spc.len() < n4 {
            self.spc.resize(n4, Complex::default())
        }

        let fft = &FFT_CONFIGURATION[shift];

        // Pre-rotation
        {
            let mut ip0 = 0;
            let mut ip1 = stride * (n2 - 1);

            fft.bitrev.iter().enumerate().for_each(|(i, rev)| {
                let re = (input[ip1] * TRIG[trigp + i]) + (input[ip0] * TRIG[trigp + n4 + i]);
                let im = (input[ip0] * TRIG[trigp + i]) - (input[ip1] * TRIG[trigp + n4 + i]);

                // We swap real and imag because we use an FFT instead of an IFFT.
                self.spc[usize::from(*rev)].r = im;
                self.spc[usize::from(*rev)].i = re;

                // Storing the pre-rotation directly in the bitrev order.
                ip0 += 2 * stride;
                ip1 = ip1.wrapping_sub(2 * stride);
            });
        }

        fft.process(&mut self.spc);

        // Post-rotate and de-shuffle.
        {
            // Even fields.
            let half_overlap = overlap >> 1;
            output[half_overlap..half_overlap + n2]
                .iter_mut()
                .step_by(2)
                .enumerate()
                .for_each(|(i, x)| {
                    let c = &self.spc[i];

                    // We'd scale up by 2 here, but instead it's done when mixing the windows.
                    let t0 = TRIG[trigp + i];
                    let t1 = TRIG[trigp + n4 + i];

                    // We swap real and imag because we're using an FFT instead of an IFFT.
                    *x = (c.i * t0) + (c.r * t1);
                });

            // Odd fields.
            output[half_overlap + 1..half_overlap + n2]
                .iter_mut()
                .step_by(2)
                .enumerate()
                .for_each(|(i, x)| {
                    let c = &self.spc[n4 - i - 1];

                    // We'd scale up by 2 here, but instead it's done when mixing the windows.
                    let t0 = TRIG[trigp + n4 - i - 1];
                    let t1 = TRIG[trigp + n2 - i - 1];

                    // We swap real and imag because we're using an FFT instead of an IFFT.
                    *x = (c.i * t1) - (c.r * t0);
                });
        }

        // Mirror on both sides for TDAC.
        {
            let mut op0 = 0;
            let mut op1 = overlap - 1;
            let mut wp0 = 0;
            let mut wp1 = overlap - 1;

            (0..overlap / 2).into_iter().for_each(|_| {
                let x0 = output[op1];
                let x1 = output[op0];
                output[op0] = (window[wp1] * x1) - (window[wp0] * x0);
                output[op1] = (window[wp0] * x1) + (window[wp1] * x0);

                op0 += 1;
                op1 -= 1;

                wp0 += 1;
                wp1 -= 1;
            });
        }
    }
}

#[rustfmt::skip]
#[allow(clippy::excessive_precision)]
const TRIG: &[f32] = &[
    0.99999994, 0.99999321, 0.99997580, 0.99994773, 0.99990886,
    0.99985933, 0.99979913, 0.99972820, 0.99964654, 0.99955416,
    0.99945110, 0.99933738, 0.99921292, 0.99907774, 0.99893188,
    0.99877530, 0.99860805, 0.99843007, 0.99824142, 0.99804211,
    0.99783206, 0.99761140, 0.99737996, 0.99713790, 0.99688518,
    0.99662173, 0.99634761, 0.99606287, 0.99576741, 0.99546129,
    0.99514455, 0.99481714, 0.99447906, 0.99413031, 0.99377096,
    0.99340093, 0.99302030, 0.99262899, 0.99222708, 0.99181455,
    0.99139136, 0.99095762, 0.99051321, 0.99005818, 0.98959261,
    0.98911643, 0.98862964, 0.98813224, 0.98762429, 0.98710573,
    0.98657662, 0.98603696, 0.98548669, 0.98492593, 0.98435456,
    0.98377270, 0.98318028, 0.98257732, 0.98196387, 0.98133987,
    0.98070538, 0.98006040, 0.97940493, 0.97873890, 0.97806245,
    0.97737551, 0.97667813, 0.97597027, 0.97525197, 0.97452319,
    0.97378403, 0.97303438, 0.97227436, 0.97150391, 0.97072303,
    0.96993178, 0.96913016, 0.96831810, 0.96749574, 0.96666300,
    0.96581990, 0.96496642, 0.96410263, 0.96322852, 0.96234411,
    0.96144938, 0.96054435, 0.95962906, 0.95870346, 0.95776761,
    0.95682150, 0.95586514, 0.95489854, 0.95392174, 0.95293468,
    0.95193744, 0.95093000, 0.94991243, 0.94888461, 0.94784665,
    0.94679856, 0.94574034, 0.94467193, 0.94359344, 0.94250488,
    0.94140619, 0.94029742, 0.93917859, 0.93804967, 0.93691075,
    0.93576175, 0.93460274, 0.93343377, 0.93225473, 0.93106574,
    0.92986679, 0.92865789, 0.92743903, 0.92621022, 0.92497152,
    0.92372292, 0.92246443, 0.92119598, 0.91991776, 0.91862965,
    0.91733170, 0.91602397, 0.91470635, 0.91337901, 0.91204184,
    0.91069490, 0.90933824, 0.90797186, 0.90659571, 0.90520984,
    0.90381432, 0.90240908, 0.90099424, 0.89956969, 0.89813554,
    0.89669174, 0.89523834, 0.89377540, 0.89230281, 0.89082074,
    0.88932908, 0.88782793, 0.88631725, 0.88479710, 0.88326746,
    0.88172835, 0.88017982, 0.87862182, 0.87705445, 0.87547767,
    0.87389153, 0.87229604, 0.87069118, 0.86907703, 0.86745358,
    0.86582077, 0.86417878, 0.86252749, 0.86086690, 0.85919720,
    0.85751826, 0.85583007, 0.85413277, 0.85242635, 0.85071075,
    0.84898609, 0.84725231, 0.84550947, 0.84375757, 0.84199661,
    0.84022665, 0.83844769, 0.83665979, 0.83486289, 0.83305705,
    0.83124226, 0.82941860, 0.82758605, 0.82574469, 0.82389444,
    0.82203537, 0.82016748, 0.81829083, 0.81640542, 0.81451124,
    0.81260836, 0.81069672, 0.80877650, 0.80684757, 0.80490994,
    0.80296379, 0.80100900, 0.79904562, 0.79707366, 0.79509324,
    0.79310423, 0.79110676, 0.78910083, 0.78708643, 0.78506362,
    0.78303236, 0.78099275, 0.77894479, 0.77688843, 0.77482378,
    0.77275085, 0.77066964, 0.76858020, 0.76648247, 0.76437658,
    0.76226246, 0.76014024, 0.75800985, 0.75587130, 0.75372469,
    0.75157005, 0.74940729, 0.74723655, 0.74505776, 0.74287105,
    0.74067634, 0.73847371, 0.73626316, 0.73404479, 0.73181850,
    0.72958434, 0.72734243, 0.72509271, 0.72283524, 0.72057003,
    0.71829706, 0.71601641, 0.71372813, 0.71143216, 0.70912862,
    0.70681745, 0.70449871, 0.70217246, 0.69983864, 0.69749737,
    0.69514859, 0.69279242, 0.69042879, 0.68805778, 0.68567938,
    0.68329364, 0.68090063, 0.67850029, 0.67609268, 0.67367786,
    0.67125577, 0.66882652, 0.66639012, 0.66394657, 0.66149592,
    0.65903819, 0.65657341, 0.65410155, 0.65162271, 0.64913690,
    0.64664418, 0.64414448, 0.64163786, 0.63912445, 0.63660413,
    0.63407701, 0.63154310, 0.62900239, 0.62645501, 0.62390089,
    0.62134010, 0.61877263, 0.61619854, 0.61361790, 0.61103064,
    0.60843682, 0.60583651, 0.60322970, 0.60061646, 0.59799677,
    0.59537065, 0.59273821, 0.59009939, 0.58745426, 0.58480281,
    0.58214509, 0.57948118, 0.57681108, 0.57413477, 0.57145232,
    0.56876373, 0.56606907, 0.56336832, 0.56066155, 0.55794877,
    0.55523002, 0.55250537, 0.54977477, 0.54703826, 0.54429591,
    0.54154772, 0.53879374, 0.53603399, 0.53326851, 0.53049731,
    0.52772039, 0.52493787, 0.52214974, 0.51935595, 0.51655668,
    0.51375180, 0.51094145, 0.50812566, 0.50530440, 0.50247771,
    0.49964568, 0.49680826, 0.49396557, 0.49111754, 0.48826426,
    0.48540577, 0.48254207, 0.47967321, 0.47679919, 0.47392011,
    0.47103590, 0.46814668, 0.46525243, 0.46235323, 0.45944905,
    0.45653993, 0.45362595, 0.45070711, 0.44778344, 0.44485497,
    0.44192174, 0.43898380, 0.43604112, 0.43309379, 0.43014181,
    0.42718524, 0.42422408, 0.42125839, 0.41828820, 0.41531351,
    0.41233435, 0.40935081, 0.40636289, 0.40337059, 0.40037400,
    0.39737311, 0.39436796, 0.39135858, 0.38834500, 0.38532731,
    0.38230544, 0.37927949, 0.37624949, 0.37321547, 0.37017745,
    0.36713544, 0.36408952, 0.36103970, 0.35798600, 0.35492846,
    0.35186714, 0.34880206, 0.34573323, 0.34266070, 0.33958447,
    0.33650464, 0.33342120, 0.33033419, 0.32724363, 0.32414958,
    0.32105204, 0.31795108, 0.31484672, 0.31173897, 0.30862790,
    0.30551350, 0.30239585, 0.29927495, 0.29615086, 0.29302359,
    0.28989318, 0.28675964, 0.28362307, 0.28048345, 0.27734083,
    0.27419522, 0.27104670, 0.26789525, 0.26474094, 0.26158381,
    0.25842386, 0.25526115, 0.25209570, 0.24892756, 0.24575676,
    0.24258332, 0.23940729, 0.23622867, 0.23304754, 0.22986393,
    0.22667783, 0.22348931, 0.22029841, 0.21710514, 0.21390954,
    0.21071166, 0.20751151, 0.20430915, 0.20110460, 0.19789790,
    0.19468907, 0.19147816, 0.18826519, 0.18505022, 0.18183327,
    0.17861435, 0.17539354, 0.17217083, 0.16894630, 0.16571994,
    0.16249183, 0.15926196, 0.15603039, 0.15279715, 0.14956227,
    0.14632578, 0.14308774, 0.13984816, 0.13660708, 0.13336454,
    0.13012058, 0.12687522, 0.12362850, 0.12038045, 0.11713112,
    0.11388054, 0.11062872, 0.10737573, 0.10412160, 0.10086634,
    0.097609997, 0.094352618, 0.091094226, 0.087834857, 0.084574550,
    0.081313334, 0.078051247, 0.074788325, 0.071524605, 0.068260118,
    0.064994894, 0.061728980, 0.058462404, 0.055195201, 0.051927410,
    0.048659060, 0.045390189, 0.042120833, 0.038851023, 0.035580799,
    0.032310195, 0.029039243, 0.025767982, 0.022496443, 0.019224664,
    0.015952680, 0.012680525, 0.0094082337, 0.0061358409, 0.0028633832,
    -0.00040910527, -0.0036815894, -0.0069540343, -0.010226404, -0.013498665,
    -0.016770782, -0.020042717, -0.023314439, -0.026585912, -0.029857099,
    -0.033127967, -0.036398482, -0.039668605, -0.042938303, -0.046207540,
    -0.049476285, -0.052744497, -0.056012146, -0.059279196, -0.062545612,
    -0.065811358, -0.069076397, -0.072340697, -0.075604223, -0.078866936,
    -0.082128808, -0.085389800, -0.088649876, -0.091909006, -0.095167145,
    -0.098424271, -0.10168034, -0.10493532, -0.10818918, -0.11144188,
    -0.11469338, -0.11794366, -0.12119267, -0.12444039, -0.12768677,
    -0.13093179, -0.13417540, -0.13741758, -0.14065829, -0.14389749,
    -0.14713514, -0.15037122, -0.15360570, -0.15683852, -0.16006967,
    -0.16329910, -0.16652679, -0.16975269, -0.17297678, -0.17619900,
    -0.17941935, -0.18263777, -0.18585424, -0.18906870, -0.19228116,
    -0.19549155, -0.19869985, -0.20190603, -0.20511003, -0.20831184,
    -0.21151142, -0.21470875, -0.21790376, -0.22109644, -0.22428675,
    -0.22747467, -0.23066014, -0.23384315, -0.23702365, -0.24020162,
    -0.24337701, -0.24654980, -0.24971995, -0.25288740, -0.25605217,
    -0.25921419, -0.26237345, -0.26552987, -0.26868346, -0.27183419,
    -0.27498198, -0.27812684, -0.28126872, -0.28440759, -0.28754342,
    -0.29067615, -0.29380578, -0.29693225, -0.30005556, -0.30317566,
    -0.30629250, -0.30940607, -0.31251630, -0.31562322, -0.31872672,
    -0.32182685, -0.32492352, -0.32801670, -0.33110636, -0.33419248,
    -0.33727503, -0.34035397, -0.34342924, -0.34650084, -0.34956875,
    -0.35263291, -0.35569328, -0.35874987, -0.36180258, -0.36485144,
    -0.36789638, -0.37093741, -0.37397444, -0.37700745, -0.38003644,
    -0.38306138, -0.38608220, -0.38909888, -0.39211139, -0.39511973,
    -0.39812380, -0.40112361, -0.40411916, -0.40711036, -0.41009718,
    -0.41307965, -0.41605768, -0.41903123, -0.42200032, -0.42496487,
    -0.42792490, -0.43088034, -0.43383113, -0.43677729, -0.43971881,
    -0.44265559, -0.44558764, -0.44851488, -0.45143735, -0.45435500,
    -0.45726776, -0.46017563, -0.46307856, -0.46597654, -0.46886954,
    -0.47175750, -0.47464043, -0.47751826, -0.48039100, -0.48325855,
    -0.48612097, -0.48897815, -0.49183011, -0.49467680, -0.49751821,
    -0.50035429, -0.50318497, -0.50601029, -0.50883019, -0.51164466,
    -0.51445359, -0.51725709, -0.52005500, -0.52284735, -0.52563411,
    -0.52841520, -0.53119069, -0.53396046, -0.53672451, -0.53948283,
    -0.54223537, -0.54498214, -0.54772300, -0.55045801, -0.55318713,
    -0.55591035, -0.55862761, -0.56133890, -0.56404412, -0.56674337,
    -0.56943649, -0.57212353, -0.57480448, -0.57747924, -0.58014780,
    -0.58281022, -0.58546633, -0.58811617, -0.59075975, -0.59339696,
    -0.59602785, -0.59865236, -0.60127044, -0.60388207, -0.60648727,
    -0.60908598, -0.61167812, -0.61426371, -0.61684275, -0.61941516,
    -0.62198097, -0.62454009, -0.62709254, -0.62963831, -0.63217729,
    -0.63470948, -0.63723493, -0.63975352, -0.64226526, -0.64477009,
    -0.64726806, -0.64975911, -0.65224314, -0.65472025, -0.65719032,
    -0.65965337, -0.66210932, -0.66455823, -0.66700000, -0.66943461,
    -0.67186207, -0.67428231, -0.67669535, -0.67910111, -0.68149966,
    -0.68389088, -0.68627477, -0.68865126, -0.69102043, -0.69338220,
    -0.69573659, -0.69808346, -0.70042288, -0.70275480, -0.70507920,
    -0.70739603, -0.70970529, -0.71200693, -0.71430099, -0.71658736,
    -0.71886611, -0.72113711, -0.72340041, -0.72565591, -0.72790372,
    -0.73014367, -0.73237586, -0.73460019, -0.73681659, -0.73902518,
    -0.74122584, -0.74341851, -0.74560326, -0.74778003, -0.74994880,
    -0.75210953, -0.75426215, -0.75640678, -0.75854325, -0.76067162,
    -0.76279181, -0.76490390, -0.76700771, -0.76910341, -0.77119076,
    -0.77326995, -0.77534080, -0.77740335, -0.77945763, -0.78150350,
    -0.78354102, -0.78557014, -0.78759086, -0.78960317, -0.79160696,
    -0.79360235, -0.79558921, -0.79756755, -0.79953730, -0.80149853,
    -0.80345118, -0.80539525, -0.80733067, -0.80925739, -0.81117553,
    -0.81308490, -0.81498563, -0.81687760, -0.81876087, -0.82063532,
    -0.82250100, -0.82435787, -0.82620591, -0.82804507, -0.82987541,
    -0.83169687, -0.83350939, -0.83531296, -0.83710766, -0.83889335,
    -0.84067005, -0.84243774, -0.84419644, -0.84594607, -0.84768665,
    -0.84941816, -0.85114056, -0.85285389, -0.85455805, -0.85625303,
    -0.85793889, -0.85961550, -0.86128294, -0.86294121, -0.86459017,
    -0.86622989, -0.86786032, -0.86948150, -0.87109333, -0.87269586,
    -0.87428904, -0.87587279, -0.87744725, -0.87901229, -0.88056785,
    -0.88211405, -0.88365078, -0.88517809, -0.88669586, -0.88820416,
    -0.88970292, -0.89119220, -0.89267188, -0.89414203, -0.89560264,
    -0.89705360, -0.89849502, -0.89992678, -0.90134889, -0.90276134,
    -0.90416414, -0.90555727, -0.90694070, -0.90831441, -0.90967834,
    -0.91103262, -0.91237706, -0.91371179, -0.91503674, -0.91635185,
    -0.91765714, -0.91895264, -0.92023826, -0.92151409, -0.92277998,
    -0.92403603, -0.92528218, -0.92651838, -0.92774469, -0.92896110,
    -0.93016750, -0.93136400, -0.93255049, -0.93372697, -0.93489349,
    -0.93604994, -0.93719643, -0.93833286, -0.93945926, -0.94057560,
    -0.94168180, -0.94277799, -0.94386405, -0.94494003, -0.94600588,
    -0.94706154, -0.94810712, -0.94914252, -0.95016778, -0.95118284,
    -0.95218778, -0.95318246, -0.95416695, -0.95514119, -0.95610523,
    -0.95705903, -0.95800257, -0.95893586, -0.95985889, -0.96077162,
    -0.96167403, -0.96256620, -0.96344805, -0.96431959, -0.96518075,
    -0.96603161, -0.96687216, -0.96770233, -0.96852213, -0.96933156,
    -0.97013056, -0.97091925, -0.97169751, -0.97246534, -0.97322279,
    -0.97396982, -0.97470641, -0.97543252, -0.97614825, -0.97685349,
    -0.97754824, -0.97823256, -0.97890645, -0.97956979, -0.98022264,
    -0.98086500, -0.98149687, -0.98211825, -0.98272908, -0.98332942,
    -0.98391914, -0.98449844, -0.98506713, -0.98562527, -0.98617285,
    -0.98670989, -0.98723638, -0.98775226, -0.98825759, -0.98875231,
    -0.98923647, -0.98971003, -0.99017298, -0.99062532, -0.99106705,
    -0.99149817, -0.99191868, -0.99232858, -0.99272782, -0.99311644,
    -0.99349445, -0.99386179, -0.99421853, -0.99456459, -0.99489999,
    -0.99522477, -0.99553883, -0.99584228, -0.99613506, -0.99641716,
    -0.99668860, -0.99694937, -0.99719942, -0.99743885, -0.99766755,
    -0.99788558, -0.99809295, -0.99828959, -0.99847561, -0.99865085,
    -0.99881548, -0.99896932, -0.99911255, -0.99924499, -0.99936682,
    -0.99947786, -0.99957830, -0.99966794, -0.99974692, -0.99981517,
    -0.99987274, -0.99991959, -0.99995571, -0.99998116, -0.99999589,
    0.99999964, 0.99997288, 0.99990326, 0.99979085, 0.99963558,
    0.99943751, 0.99919659, 0.99891287, 0.99858636, 0.99821711,
    0.99780506, 0.99735034, 0.99685282, 0.99631262, 0.99572974,
    0.99510419, 0.99443603, 0.99372530, 0.99297196, 0.99217612,
    0.99133772, 0.99045694, 0.98953366, 0.98856801, 0.98756003,
    0.98650974, 0.98541719, 0.98428243, 0.98310548, 0.98188645,
    0.98062533, 0.97932225, 0.97797716, 0.97659022, 0.97516143,
    0.97369087, 0.97217858, 0.97062469, 0.96902919, 0.96739221,
    0.96571374, 0.96399397, 0.96223283, 0.96043050, 0.95858705,
    0.95670253, 0.95477700, 0.95281059, 0.95080340, 0.94875544,
    0.94666684, 0.94453770, 0.94236809, 0.94015813, 0.93790787,
    0.93561745, 0.93328691, 0.93091643, 0.92850608, 0.92605597,
    0.92356616, 0.92103678, 0.91846794, 0.91585976, 0.91321236,
    0.91052586, 0.90780038, 0.90503591, 0.90223277, 0.89939094,
    0.89651060, 0.89359182, 0.89063478, 0.88763964, 0.88460642,
    0.88153529, 0.87842643, 0.87527996, 0.87209594, 0.86887461,
    0.86561602, 0.86232042, 0.85898781, 0.85561842, 0.85221243,
    0.84876984, 0.84529096, 0.84177583, 0.83822471, 0.83463764,
    0.83101481, 0.82735640, 0.82366252, 0.81993335, 0.81616908,
    0.81236988, 0.80853581, 0.80466717, 0.80076402, 0.79682660,
    0.79285502, 0.78884947, 0.78481019, 0.78073722, 0.77663082,
    0.77249116, 0.76831841, 0.76411277, 0.75987434, 0.75560343,
    0.75130010, 0.74696463, 0.74259710, 0.73819780, 0.73376691,
    0.72930455, 0.72481096, 0.72028631, 0.71573079, 0.71114463,
    0.70652801, 0.70188117, 0.69720417, 0.69249737, 0.68776089,
    0.68299496, 0.67819971, 0.67337549, 0.66852236, 0.66364062,
    0.65873051, 0.65379208, 0.64882571, 0.64383155, 0.63880974,
    0.63376063, 0.62868434, 0.62358117, 0.61845124, 0.61329484,
    0.60811216, 0.60290343, 0.59766883, 0.59240872, 0.58712316,
    0.58181250, 0.57647687, 0.57111657, 0.56573176, 0.56032276,
    0.55488980, 0.54943299, 0.54395270, 0.53844911, 0.53292239,
    0.52737290, 0.52180082, 0.51620632, 0.51058978, 0.50495136,
    0.49929130, 0.49360985, 0.48790723, 0.48218375, 0.47643960,
    0.47067502, 0.46489030, 0.45908567, 0.45326138, 0.44741765,
    0.44155475, 0.43567297, 0.42977250, 0.42385364, 0.41791660,
    0.41196167, 0.40598908, 0.39999911, 0.39399201, 0.38796803,
    0.38192743, 0.37587047, 0.36979741, 0.36370850, 0.35760403,
    0.35148421, 0.34534934, 0.33919969, 0.33303553, 0.32685706,
    0.32066461, 0.31445843, 0.30823877, 0.30200592, 0.29576012,
    0.28950164, 0.28323078, 0.27694780, 0.27065292, 0.26434645,
    0.25802869, 0.25169984, 0.24536023, 0.23901010, 0.23264973,
    0.22627939, 0.21989937, 0.21350993, 0.20711134, 0.20070387,
    0.19428782, 0.18786344, 0.18143101, 0.17499080, 0.16854310,
    0.16208819, 0.15562633, 0.14915779, 0.14268288, 0.13620184,
    0.12971498, 0.12322257, 0.11672486, 0.11022217, 0.10371475,
    0.097202882, 0.090686858, 0.084166944, 0.077643424, 0.071116582,
    0.064586692, 0.058054037, 0.051518895, 0.044981543, 0.038442269,
    0.031901345, 0.025359053, 0.018815678, 0.012271495, 0.0057267868,
    -0.00081816671, -0.0073630852, -0.013907688, -0.020451695, -0.026994826,
    -0.033536803, -0.040077340, -0.046616159, -0.053152986, -0.059687532,
    -0.066219524, -0.072748676, -0.079274714, -0.085797355, -0.092316322,
    -0.098831341, -0.10534211, -0.11184838, -0.11834986, -0.12484626,
    -0.13133731, -0.13782275, -0.14430228, -0.15077563, -0.15724251,
    -0.16370267, -0.17015581, -0.17660165, -0.18303993, -0.18947038,
    -0.19589271, -0.20230664, -0.20871192, -0.21510825, -0.22149536,
    -0.22787298, -0.23424086, -0.24059868, -0.24694622, -0.25328314,
    -0.25960925, -0.26592422, -0.27222782, -0.27851975, -0.28479972,
    -0.29106751, -0.29732284, -0.30356544, -0.30979502, -0.31601134,
    -0.32221413, -0.32840309, -0.33457801, -0.34073856, -0.34688455,
    -0.35301566, -0.35913166, -0.36523229, -0.37131724, -0.37738630,
    -0.38343921, -0.38947567, -0.39549544, -0.40149832, -0.40748394,
    -0.41345215, -0.41940263, -0.42533514, -0.43124944, -0.43714526,
    -0.44302234, -0.44888046, -0.45471936, -0.46053877, -0.46633846,
    -0.47211814, -0.47787762, -0.48361665, -0.48933494, -0.49503228,
    -0.50070840, -0.50636309, -0.51199609, -0.51760709, -0.52319598,
    -0.52876246, -0.53430629, -0.53982723, -0.54532504, -0.55079949,
    -0.55625033, -0.56167740, -0.56708032, -0.57245898, -0.57781315,
    -0.58314258, -0.58844697, -0.59372622, -0.59897995, -0.60420811,
    -0.60941035, -0.61458647, -0.61973625, -0.62485951, -0.62995601,
    -0.63502556, -0.64006782, -0.64508271, -0.65007001, -0.65502942,
    -0.65996075, -0.66486382, -0.66973841, -0.67458433, -0.67940134,
    -0.68418926, -0.68894786, -0.69367695, -0.69837630, -0.70304573,
    -0.70768511, -0.71229410, -0.71687263, -0.72142041, -0.72593731,
    -0.73042315, -0.73487765, -0.73930067, -0.74369204, -0.74805158,
    -0.75237900, -0.75667429, -0.76093709, -0.76516730, -0.76936477,
    -0.77352923, -0.77766061, -0.78175867, -0.78582323, -0.78985411,
    -0.79385114, -0.79781419, -0.80174309, -0.80563760, -0.80949765,
    -0.81332302, -0.81711352, -0.82086903, -0.82458937, -0.82827437,
    -0.83192390, -0.83553779, -0.83911592, -0.84265804, -0.84616417,
    -0.84963393, -0.85306740, -0.85646427, -0.85982448, -0.86314780,
    -0.86643422, -0.86968350, -0.87289548, -0.87607014, -0.87920725,
    -0.88230664, -0.88536829, -0.88839203, -0.89137769, -0.89432514,
    -0.89723432, -0.90010506, -0.90293723, -0.90573072, -0.90848541,
    -0.91120118, -0.91387796, -0.91651553, -0.91911387, -0.92167282,
    -0.92419231, -0.92667222, -0.92911243, -0.93151283, -0.93387336,
    -0.93619382, -0.93847424, -0.94071442, -0.94291431, -0.94507378,
    -0.94719279, -0.94927126, -0.95130903, -0.95330608, -0.95526224,
    -0.95717752, -0.95905179, -0.96088499, -0.96267700, -0.96442777,
    -0.96613729, -0.96780539, -0.96943200, -0.97101706, -0.97256058,
    -0.97406244, -0.97552258, -0.97694093, -0.97831738, -0.97965199,
    -0.98094457, -0.98219514, -0.98340368, -0.98457009, -0.98569429,
    -0.98677629, -0.98781598, -0.98881340, -0.98976845, -0.99068111,
    -0.99155134, -0.99237907, -0.99316430, -0.99390697, -0.99460709,
    -0.99526459, -0.99587947, -0.99645168, -0.99698120, -0.99746799,
    -0.99791211, -0.99831343, -0.99867201, -0.99898779, -0.99926084,
    -0.99949104, -0.99967843, -0.99982297, -0.99992472, -0.99998361,
    0.99999869, 0.99989158, 0.99961317, 0.99916345, 0.99854255,
    0.99775058, 0.99678761, 0.99565387, 0.99434954, 0.99287480,
    0.99122995, 0.98941529, 0.98743105, 0.98527765, 0.98295540,
    0.98046476, 0.97780609, 0.97497988, 0.97198665, 0.96882683,
    0.96550101, 0.96200979, 0.95835376, 0.95453346, 0.95054960,
    0.94640291, 0.94209403, 0.93762374, 0.93299282, 0.92820197,
    0.92325211, 0.91814411, 0.91287869, 0.90745693, 0.90187967,
    0.89614785, 0.89026248, 0.88422459, 0.87803519, 0.87169534,
    0.86520612, 0.85856867, 0.85178405, 0.84485358, 0.83777827,
    0.83055943, 0.82319832, 0.81569612, 0.80805415, 0.80027372,
    0.79235619, 0.78430289, 0.77611518, 0.76779449, 0.75934225,
    0.75075996, 0.74204898, 0.73321080, 0.72424710, 0.71515924,
    0.70594883, 0.69661748, 0.68716675, 0.67759830, 0.66791373,
    0.65811473, 0.64820296, 0.63818014, 0.62804794, 0.61780810,
    0.60746247, 0.59701276, 0.58646071, 0.57580817, 0.56505698,
    0.55420899, 0.54326600, 0.53222996, 0.52110273, 0.50988621,
    0.49858227, 0.48719296, 0.47572014, 0.46416581, 0.45253196,
    0.44082057, 0.42903364, 0.41717321, 0.40524128, 0.39323992,
    0.38117120, 0.36903715, 0.35683987, 0.34458145, 0.33226398,
    0.31988961, 0.30746040, 0.29497850, 0.28244606, 0.26986524,
    0.25723818, 0.24456702, 0.23185398, 0.21910121, 0.20631088,
    0.19348522, 0.18062639, 0.16773662, 0.15481812, 0.14187308,
    0.12890373, 0.11591230, 0.10290100, 0.089872077, 0.076827750,
    0.063770257, 0.050701842, 0.037624735, 0.024541186, 0.011453429,
    -0.0016362892, -0.014725727, -0.027812643, -0.040894791, -0.053969935,
    -0.067035832, -0.080090240, -0.093130924, -0.10615565, -0.11916219,
    -0.13214831, -0.14511178, -0.15805040, -0.17096193, -0.18384418,
    -0.19669491, -0.20951195, -0.22229309, -0.23503613, -0.24773891,
    -0.26039925, -0.27301496, -0.28558388, -0.29810387, -0.31057280,
    -0.32298848, -0.33534884, -0.34765175, -0.35989508, -0.37207675,
    -0.38419467, -0.39624676, -0.40823093, -0.42014518, -0.43198743,
    -0.44375566, -0.45544785, -0.46706200, -0.47859612, -0.49004826,
    -0.50141639, -0.51269865, -0.52389306, -0.53499764, -0.54601061,
    -0.55693001, -0.56775403, -0.57848072, -0.58910829, -0.59963489,
    -0.61005878, -0.62037814, -0.63059121, -0.64069623, -0.65069145,
    -0.66057515, -0.67034572, -0.68000144, -0.68954057, -0.69896162,
    -0.70826286, -0.71744281, -0.72649974, -0.73543227, -0.74423873,
    -0.75291771, -0.76146764, -0.76988715, -0.77817470, -0.78632891,
    -0.79434842, -0.80223179, -0.80997771, -0.81758487, -0.82505190,
    -0.83237761, -0.83956063, -0.84659988, -0.85349399, -0.86024189,
    -0.86684239, -0.87329435, -0.87959671, -0.88574833, -0.89174819,
    -0.89759529, -0.90328854, -0.90882701, -0.91420978, -0.91943592,
    -0.92450452, -0.92941469, -0.93416560, -0.93875647, -0.94318646,
    -0.94745487, -0.95156091, -0.95550388, -0.95928317, -0.96289814,
    -0.96634805, -0.96963239, -0.97275060, -0.97570217, -0.97848648,
    -0.98110318, -0.98355180, -0.98583186, -0.98794299, -0.98988485,
    -0.99165714, -0.99325943, -0.99469161, -0.99595332, -0.99704438,
    -0.99796462, -0.99871385, -0.99929196, -0.99969882, -0.99993443,
    0.99999464, 0.99956632, 0.99845290, 0.99665523, 0.99417448,
    0.99101239, 0.98717111, 0.98265326, 0.97746199, 0.97160077,
    0.96507365, 0.95788515, 0.95004016, 0.94154406, 0.93240267,
    0.92262226, 0.91220951, 0.90117162, 0.88951606, 0.87725091,
    0.86438453, 0.85092574, 0.83688372, 0.82226819, 0.80708915,
    0.79135692, 0.77508235, 0.75827658, 0.74095112, 0.72311783,
    0.70478898, 0.68597710, 0.66669506, 0.64695615, 0.62677377,
    0.60616189, 0.58513457, 0.56370622, 0.54189157, 0.51970547,
    0.49716324, 0.47428027, 0.45107225, 0.42755505, 0.40374488,
    0.37965798, 0.35531086, 0.33072025, 0.30590299, 0.28087607,
    0.25565663, 0.23026201, 0.20470956, 0.17901683, 0.15320139,
    0.12728097, 0.10127331, 0.075196236, 0.049067631, 0.022905400,
    -0.0032725304, -0.029448219, -0.055603724, -0.081721120, -0.10778251,
    -0.13377003, -0.15966587, -0.18545228, -0.21111161, -0.23662624,
    -0.26197869, -0.28715160, -0.31212771, -0.33688989, -0.36142120,
    -0.38570482, -0.40972409, -0.43346253, -0.45690393, -0.48003218,
    -0.50283146, -0.52528608, -0.54738069, -0.56910020, -0.59042966,
    -0.61135447, -0.63186026, -0.65193301, -0.67155898, -0.69072473,
    -0.70941705, -0.72762316, -0.74533063, -0.76252723, -0.77920127,
    -0.79534131, -0.81093621, -0.82597536, -0.84044844, -0.85434550,
    -0.86765707, -0.88037395, -0.89248747, -0.90398932, -0.91487163,
    -0.92512697, -0.93474823, -0.94372886, -0.95206273, -0.95974404,
    -0.96676767, -0.97312868, -0.97882277, -0.98384601, -0.98819500,
    -0.99186671, -0.99485862, -0.99716878, -0.99879545, -0.99973762,
];

#[cfg(test)]
mod tests {
    #![allow(clippy::panic)]
    #![allow(clippy::unwrap_used)]

    use std::f64::consts::PI;

    use nanorand::RNG;

    use super::*;

    fn check(input: &[f32], output: &[f32], nfft: usize) {
        let mut err_pow: f64 = 0.0;
        let mut sig_pow: f64 = 0.0;

        (0..nfft / 2).into_iter().for_each(|i| {
            let mut ansr: f64 = 0.0;

            (0..nfft).into_iter().for_each(|k| {
                let phase: f64 =
                    2.0 * PI * (k as f64 + 0.5 + 0.25 * nfft as f64) * (i as f64 + 0.5)
                        / nfft as f64;
                let mut re = phase.cos();

                re /= (nfft / 4) as f64;

                ansr += input[k] as f64 * re;
            });

            let difr = ansr - output[i] as f64;
            err_pow += difr * difr;
            sig_pow += ansr * ansr;
        });

        let snr = 10.0 * (sig_pow / err_pow).log10();
        assert!(
            snr > 130.0,
            "nfft={}, inverse={}, poor snr={}",
            nfft,
            true,
            snr
        );
    }

    fn check_inv(input: &[f32], output: &[f32], nfft: usize) {
        let mut err_pow: f64 = 0.0;
        let mut sig_pow: f64 = 0.0;

        (0..nfft).into_iter().for_each(|i| {
            let mut ansr: f64 = 0.0;

            (0..nfft / 2).into_iter().for_each(|k| {
                let phase: f64 =
                    2.0 * PI * (i as f64 + 0.50 + 0.25 * nfft as f64) * (k as f64 + 0.5)
                        / nfft as f64;
                let re = phase.cos();

                ansr += input[k] as f64 * re;
            });

            let difr = ansr - output[i] as f64;
            err_pow += difr * difr;
            sig_pow += ansr * ansr;
        });

        let snr = 10.0 * (sig_pow / err_pow).log10();
        assert!(
            snr > 60.0,
            "nfft={}, inverse={}, poor snr={}",
            nfft,
            false,
            snr
        );
    }

    fn test1d(nfft: usize, is_inverse: bool) {
        let mut rng = nanorand::WyRand::new_seed(42);

        let mut mdct = Mdct::default();
        let shift = match nfft {
            1920 => 0,
            960 => 1,
            480 => 2,
            240 => 3,
            _ => return,
        };

        let mut input = vec![0_f32; nfft];
        let mut output = vec![0_f32; nfft];
        let window = vec![1.0_f32; nfft / 2];

        input.iter_mut().for_each(|x| {
            *x = (rng.generate_range::<u32>(0, 32768) as i16 - 16384) as f32;
            *x *= 32768.0;
        });

        if is_inverse {
            input.iter_mut().for_each(|x| {
                *x /= nfft as f32;
            });
        }

        let input_copy = input.clone();

        if is_inverse {
            mdct.backward(&input, &mut output, &window, nfft / 2, shift, 1);

            // Apply TDAC because backward() no longer does that.
            (0..nfft / 4).into_iter().for_each(|i| {
                output[nfft - i - 1] = output[nfft / 2 + i];
            });

            check_inv(&input, &output, nfft);
        } else {
            mdct.forward(&input, &mut output, &window, nfft / 2, shift, 1);
            check(&input_copy, &output, nfft);
        }
    }

    #[test]
    fn test_mdct() {
        test1d(240, false);
        test1d(240, true);
        test1d(480, false);
        test1d(480, true);
        test1d(960, false);
        test1d(960, true);
        test1d(1920, false);
        test1d(1920, true);
    }
}
